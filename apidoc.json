{
  "openapi": "3.0.2",
  "info": {
    "title": "DreamboothAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/dreambooth/createModel": {
      "post": {
        "summary": "Create Model",
        "description": "Create a new Dreambooth model.",
        "operationId": "create_model_dreambooth_createModel_post",
        "parameters": [
          {
            "description": "The name of the model to create.",
            "required": false,
            "schema": {
              "title": "New Model Name",
              "type": "string",
              "description": "The name of the model to create."
            },
            "name": "new_model_name",
            "in": "query"
          },
          {
            "description": "The source checkpoint to extract to create this model.",
            "required": false,
            "schema": {
              "title": "New Model Src",
              "type": "string",
              "description": "The source checkpoint to extract to create this model."
            },
            "name": "new_model_src",
            "in": "query"
          },
          {
            "description": "The scheduler to use. V2+ models ignore this.",
            "required": false,
            "schema": {
              "title": "New Model Scheduler",
              "type": "string",
              "description": "The scheduler to use. V2+ models ignore this."
            },
            "name": "new_model_scheduler",
            "in": "query"
          },
          {
            "description": "Create this model from the hub",
            "required": false,
            "schema": {
              "title": "Create From Hub",
              "type": "boolean",
              "description": "Create this model from the hub",
              "default": false
            },
            "name": "create_from_hub",
            "in": "query"
          },
          {
            "description": "The hub URL to use for this model. Must contain diffusers model.",
            "required": false,
            "schema": {
              "title": "New Model Url",
              "type": "string",
              "description": "The hub URL to use for this model. Must contain diffusers model."
            },
            "name": "new_model_url",
            "in": "query"
          },
          {
            "description": "Your huggingface hub token.",
            "required": false,
            "schema": {
              "title": "New Model Token",
              "type": "string",
              "description": "Your huggingface hub token."
            },
            "name": "new_model_token",
            "in": "query"
          },
          {
            "description": "Whether to extract EMA weights if present.",
            "required": false,
            "schema": {
              "title": "New Model Extract Ema",
              "type": "boolean",
              "description": "Whether to extract EMA weights if present.",
              "default": false
            },
            "name": "new_model_extract_ema",
            "in": "query"
          },
          {
            "description": "If an API key is set, this must be present.",
            "required": false,
            "schema": {
              "title": "Api Key",
              "type": "string",
              "description": "If an API key is set, this must be present.",
              "default": ""
            },
            "name": "api_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dreambooth/start_training": {
      "post": {
        "summary": "Start Training",
        "description": "Start training dreambooth.",
        "operationId": "start_training_dreambooth_start_training_post",
        "parameters": [
          {
            "description": "The model name to load params for.",
            "required": false,
            "schema": {
              "title": "Model Name",
              "type": "string",
              "description": "The model name to load params for."
            },
            "name": "model_name",
            "in": "query"
          },
          {
            "description": "Use txt2img to generate class images.",
            "required": false,
            "schema": {
              "title": "Use Tx2Img",
              "type": "boolean",
              "description": "Use txt2img to generate class images.",
              "default": true
            },
            "name": "use_tx2img",
            "in": "query"
          },
          {
            "description": "If an API key is set, this must be present.",
            "required": false,
            "schema": {
              "title": "Api Key",
              "type": "string",
              "description": "If an API key is set, this must be present.",
              "default": ""
            },
            "name": "api_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dreambooth/cancel": {
      "get": {
        "summary": "Cancel Jobs",
        "description": "Check the current state of Dreambooth processes.\n@return:",
        "operationId": "cancel_jobs_dreambooth_cancel_get",
        "parameters": [
          {
            "description": "If an API key is set, this must be present.",
            "required": false,
            "schema": {
              "title": "Api Key",
              "type": "string",
              "description": "If an API key is set, this must be present.",
              "default": ""
            },
            "name": "api_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dreambooth/status": {
      "get": {
        "summary": "Check Status",
        "description": "Check the current state of Dreambooth processes.\n@return:",
        "operationId": "check_status_dreambooth_status_get",
        "parameters": [
          {
            "description": "If an API key is set, this must be present.",
            "required": false,
            "schema": {
              "title": "Api Key",
              "type": "string",
              "description": "If an API key is set, this must be present.",
              "default": ""
            },
            "name": "api_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dreambooth/status_images": {
      "get": {
        "summary": "Check Status Images",
        "description": "Retrieve any images that may currently be present in the state.\nArgs:\n    api_key: An API key, if one has been set in the UI.\n\nReturns:\n    A single image or zip of images, depending on how many exist.",
        "operationId": "check_status_images_dreambooth_status_images_get",
        "parameters": [
          {
            "description": "If an API key is set, this must be present.",
            "required": false,
            "schema": {
              "title": "Api Key",
              "type": "string",
              "description": "If an API key is set, this must be present.",
              "default": ""
            },
            "name": "api_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dreambooth/model_config": {
      "get": {
        "summary": "Get Model Config",
        "description": "Get a specified model config.",
        "operationId": "get_model_config_dreambooth_model_config_get",
        "parameters": [
          {
            "description": "The model name to fetch config for.",
            "required": false,
            "schema": {
              "title": "Model Name",
              "type": "string",
              "description": "The model name to fetch config for."
            },
            "name": "model_name",
            "in": "query"
          },
          {
            "description": "If an API key is set, this must be present.",
            "required": false,
            "schema": {
              "title": "Api Key",
              "type": "string",
              "description": "If an API key is set, this must be present.",
              "default": ""
            },
            "name": "api_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Set Model Config",
        "description": "Save a model config from JSON.",
        "operationId": "set_model_config_dreambooth_model_config_post",
        "parameters": [
          {
            "description": "If an API key is set, this must be present.",
            "required": false,
            "schema": {
              "title": "Api Key",
              "type": "string",
              "description": "If an API key is set, this must be present.",
              "default": ""
            },
            "name": "api_key",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Model Cfg",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DreamboothParameters"
                  }
                ],
                "description": "The config to save"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dreambooth/get_checkpoint": {
      "get": {
        "summary": "Get Checkpoint",
        "description": "Generate and zip a checkpoint for a specified model.",
        "operationId": "get_checkpoint_dreambooth_get_checkpoint_get",
        "parameters": [
          {
            "description": "The model name of the checkpoint to get.",
            "required": true,
            "schema": {
              "title": "Model Name",
              "type": "string",
              "description": "The model name of the checkpoint to get."
            },
            "name": "model_name",
            "in": "query"
          },
          {
            "description": "Set to false to re-compile the checkpoint before retrieval.",
            "required": false,
            "schema": {
              "title": "Skip Build",
              "type": "boolean",
              "description": "Set to false to re-compile the checkpoint before retrieval.",
              "default": true
            },
            "name": "skip_build",
            "in": "query"
          },
          {
            "description": "The (optional) name of the lora model to merge with the checkpoint.",
            "required": false,
            "schema": {
              "title": "Lora Model Name",
              "type": "string",
              "description": "The (optional) name of the lora model to merge with the checkpoint.",
              "default": ""
            },
            "name": "lora_model_name",
            "in": "query"
          },
          {
            "description": "A custom name to use when generating the checkpoint.",
            "required": false,
            "schema": {
              "title": "Save Model Name",
              "type": "string",
              "description": "A custom name to use when generating the checkpoint.",
              "default": ""
            },
            "name": "save_model_name",
            "in": "query"
          },
          {
            "description": "The weight of the lora UNET when merged with the checkpoint.",
            "required": false,
            "schema": {
              "title": "Lora Weight",
              "type": "integer",
              "description": "The weight of the lora UNET when merged with the checkpoint.",
              "default": 1
            },
            "name": "lora_weight",
            "in": "query"
          },
          {
            "description": "The weight of the lora Text Encoder when merged with the checkpoint.",
            "required": false,
            "schema": {
              "title": "Lora Text Weight",
              "type": "integer",
              "description": "The weight of the lora Text Encoder when merged with the checkpoint.",
              "default": 1
            },
            "name": "lora_text_weight",
            "in": "query"
          },
          {
            "description": "If an API key is set, this must be present.",
            "required": false,
            "schema": {
              "title": "Api Key",
              "type": "string",
              "description": "If an API key is set, this must be present.",
              "default": ""
            },
            "name": "api_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dreambooth/list_checkpoints": {
      "get": {
        "summary": "Get Checkpoints",
        "description": "Generate and zip a checkpoint for a specified model.",
        "operationId": "get_checkpoints_dreambooth_list_checkpoints_get",
        "parameters": [
          {
            "description": "If an API key is set, this must be present.",
            "required": false,
            "schema": {
              "title": "Api Key",
              "type": "string",
              "description": "If an API key is set, this must be present.",
              "default": ""
            },
            "name": "api_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dreambooth/samples": {
      "get": {
        "summary": "Generate Samples",
        "description": "Generate sample images for a specified model.",
        "operationId": "generate_samples_dreambooth_samples_get",
        "parameters": [
          {
            "description": "The model name to use for generating samples.",
            "required": true,
            "schema": {
              "title": "Model Name",
              "type": "string",
              "description": "The model name to use for generating samples."
            },
            "name": "model_name",
            "in": "query"
          },
          {
            "description": "The prompt to use to generate sample images.",
            "required": true,
            "schema": {
              "title": "Sample Prompt",
              "type": "string",
              "description": "The prompt to use to generate sample images."
            },
            "name": "sample_prompt",
            "in": "query"
          },
          {
            "description": "The number of sample images to generate.",
            "required": false,
            "schema": {
              "title": "Num Images",
              "type": "integer",
              "description": "The number of sample images to generate.",
              "default": 1
            },
            "name": "num_images",
            "in": "query"
          },
          {
            "description": "How many images to generate at once.",
            "required": false,
            "schema": {
              "title": "Batch Size",
              "type": "integer",
              "description": "How many images to generate at once.",
              "default": 1
            },
            "name": "batch_size",
            "in": "query"
          },
          {
            "description": "The path to a lora model to use when generating images.",
            "required": false,
            "schema": {
              "title": "Lora Model Path",
              "type": "string",
              "description": "The path to a lora model to use when generating images.",
              "default": ""
            },
            "name": "lora_model_path",
            "in": "query"
          },
          {
            "description": "The weight of the lora unet when merging with the base model.",
            "required": false,
            "schema": {
              "title": "Lora Weight",
              "type": "number",
              "description": "The weight of the lora unet when merging with the base model.",
              "default": 1
            },
            "name": "lora_weight",
            "in": "query"
          },
          {
            "description": "The weight of the lora text encoder when merging with the base model",
            "required": false,
            "schema": {
              "title": "Lora Txt Weight",
              "type": "number",
              "description": "The weight of the lora text encoder when merging with the base model",
              "default": 1
            },
            "name": "lora_txt_weight",
            "in": "query"
          },
          {
            "description": "An optional negative prompt to use when generating images.",
            "required": false,
            "schema": {
              "title": "Negative Prompt",
              "type": "string",
              "description": "An optional negative prompt to use when generating images.",
              "default": ""
            },
            "name": "negative_prompt",
            "in": "query"
          },
          {
            "description": "The seed to use when generating samples",
            "required": false,
            "schema": {
              "title": "Seed",
              "type": "integer",
              "description": "The seed to use when generating samples",
              "default": -1
            },
            "name": "seed",
            "in": "query"
          },
          {
            "description": "The resolution used when generating samples",
            "required": false,
            "schema": {
              "title": "Resolution",
              "type": "integer",
              "description": "The resolution used when generating samples, it will be converted to (resolution, resolution)",
              "default": 512
            },
            "name": "resolution",
            "in": "query"
          },
          {
            "description": "Number of sampling steps to use when generating images.",
            "required": false,
            "schema": {
              "title": "Steps",
              "type": "integer",
              "description": "Number of sampling steps to use when generating images.",
              "default": 60
            },
            "name": "steps",
            "in": "query"
          },
          {
            "description": "CFG scale to use when generating images.",
            "required": false,
            "schema": {
              "title": "Scale",
              "type": "number",
              "description": "CFG scale to use when generating images.",
              "default": 7.5
            },
            "name": "scale",
            "in": "query"
          },
          {
            "description": "If an API key is set, this must be present.",
            "required": false,
            "schema": {
              "title": "Api Key",
              "type": "string",
              "description": "If an API key is set, this must be present.",
              "default": ""
            },
            "name": "api_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dreambooth/classifiers": {
      "get": {
        "summary": "Get Classifiers",
        "description": "Retrieve generated classifier images from a saved model config.",
        "operationId": "get_classifiers_dreambooth_classifiers_get",
        "parameters": [
          {
            "description": "The model name to retrieve classifiers for.",
            "required": true,
            "schema": {
              "title": "Model Name",
              "type": "string",
              "description": "The model name to retrieve classifiers for."
            },
            "name": "model_name",
            "in": "query"
          },
          {
            "description": "If set, will retrieve the specified concept's class images. Otherwise, all class images will be retrieved.",
            "required": false,
            "schema": {
              "title": "Concept Idx",
              "type": "integer",
              "description": "If set, will retrieve the specified concept's class images. Otherwise, all class images will be retrieved.",
              "default": -1
            },
            "name": "concept_idx",
            "in": "query"
          },
          {
            "description": "If an API key is set, this must be present.",
            "required": false,
            "schema": {
              "title": "Api Key",
              "type": "string",
              "description": "If an API key is set, this must be present.",
              "default": ""
            },
            "name": "api_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Generate Classes",
        "description": "Generate classification images for a model based on a saved config.",
        "operationId": "generate_classes_dreambooth_classifiers_post",
        "parameters": [
          {
            "description": "The model name to generate classifiers for.",
            "required": true,
            "schema": {
              "title": "Model Name",
              "type": "string",
              "description": "The model name to generate classifiers for."
            },
            "name": "model_name",
            "in": "query"
          },
          {
            "description": "Use Txt2Image to generate classifiers.",
            "required": false,
            "schema": {
              "title": "Use Txt2Img",
              "type": "boolean",
              "description": "Use Txt2Image to generate classifiers.",
              "default": ""
            },
            "name": "use_txt2img",
            "in": "query"
          },
          {
            "description": "If an API key is set, this must be present.",
            "required": false,
            "schema": {
              "title": "Api Key",
              "type": "string",
              "description": "If an API key is set, this must be present.",
              "default": ""
            },
            "name": "api_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dreambooth/upload": {
      "post": {
        "summary": "Upload Db Images",
        "description": "Upload images for training.\n\nRequest body should be a JSON Object. Primary key is 'imageList'.\n\n'imageList' is a list of objects. Each object should have three values:\n'data' - A base64-encoded string containing the binary data of the image.\n'name' - The filename to store the image under.\n'txt' - The caption for the image. Will be stored in a text file beside the image.",
        "operationId": "upload_db_images_dreambooth_upload_post",
        "parameters": [
          {
            "description": "The model name to upload images for.",
            "required": true,
            "schema": {
              "title": "Model Name",
              "type": "string",
              "description": "The model name to upload images for."
            },
            "name": "model_name",
            "in": "query"
          },
          {
            "description": "The concept/instance name the images are for.",
            "required": true,
            "schema": {
              "title": "Instance Name",
              "type": "string",
              "description": "The concept/instance name the images are for."
            },
            "name": "instance_name",
            "in": "query"
          },
          {
            "description": "If an API key is set, this must be present.",
            "required": false,
            "schema": {
              "title": "Api Key",
              "type": "string",
              "description": "If an API key is set, this must be present.",
              "default": ""
            },
            "name": "api_key",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Images",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DbImagesRequest"
                  }
                ],
                "description": "A dictionary of images, filenames, and prompts to save."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dreambooth/testimg": {
      "get": {
        "summary": "Generate Test Data",
        "operationId": "generate_test_data_dreambooth_testimg_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_login_login__post": {
        "title": "Body_login_login__post",
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "title": "Grant Type",
            "pattern": "password",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "scope": {
            "title": "Scope",
            "type": "string",
            "default": ""
          },
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          }
        }
      },
      "Body_login_login_post": {
        "title": "Body_login_login_post",
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "title": "Grant Type",
            "pattern": "password",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "scope": {
            "title": "Scope",
            "type": "string",
            "default": ""
          },
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          }
        }
      },
      "DbImagesRequest": {
        "title": "DbImagesRequest",
        "required": [
          "imageList"
        ],
        "type": "object",
        "properties": {
          "imageList": {
            "title": "Images",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceData"
            },
            "description": "List of images to work on. Must be Base64 strings"
          }
        }
      },
      "DreamboothConcept": {
        "title": "DreamboothConcept",
        "type": "object",
        "properties": {
          "instance_data_dir": {
            "title": "Instance Data Dir",
            "type": "string",
            "default": ""
          },
          "class_data_dir": {
            "title": "Class Data Dir",
            "type": "string",
            "default": ""
          },
          "instance_prompt": {
            "title": "Instance Prompt",
            "type": "string",
            "default": ""
          },
          "class_prompt": {
            "title": "Class Prompt",
            "type": "string",
            "default": ""
          },
          "save_sample_prompt": {
            "title": "Save Sample Prompt",
            "type": "string",
            "default": ""
          },
          "save_sample_template": {
            "title": "Save Sample Template",
            "type": "string",
            "default": ""
          },
          "instance_token": {
            "title": "Instance Token",
            "type": "string",
            "default": ""
          },
          "class_token": {
            "title": "Class Token",
            "type": "string",
            "default": ""
          },
          "num_class_images_per": {
            "title": "Num Class Images Per",
            "type": "integer",
            "default": 0
          },
          "class_negative_prompt": {
            "title": "Class Negative Prompt",
            "type": "string",
            "default": ""
          },
          "class_guidance_scale": {
            "title": "Class Guidance Scale",
            "type": "number",
            "default": 7.5
          },
          "class_infer_steps": {
            "title": "Class Infer Steps",
            "type": "integer",
            "default": 60
          },
          "save_sample_negative_prompt": {
            "title": "Save Sample Negative Prompt",
            "type": "string",
            "default": ""
          },
          "n_save_sample": {
            "title": "N Save Sample",
            "type": "integer",
            "default": 1
          },
          "sample_seed": {
            "title": "Sample Seed",
            "type": "integer",
            "default": -1
          },
          "save_guidance_scale": {
            "title": "Save Guidance Scale",
            "type": "number",
            "default": 7.5
          },
          "save_infer_steps": {
            "title": "Save Infer Steps",
            "type": "integer",
            "default": 60
          }
        }
      },
      "DreamboothParameters": {
        "title": "DreamboothParameters",
        "required": [
          "concepts_list"
        ],
        "type": "object",
        "properties": {
          "concepts_list": {
            "title": "Concepts List",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DreamboothConcept"
            }
          },
          "attention": {
            "title": "Attention",
            "type": "string",
            "default": "default"
          },
          "cache_latents": {
            "title": "Cache Latents",
            "type": "boolean",
            "default": true
          },
          "center_crop": {
            "title": "Center Crop",
            "type": "boolean",
            "default": false
          },
          "clip_skip": {
            "title": "Clip Skip",
            "type": "integer",
            "default": 1
          },
          "concepts_path": {
            "title": "Concepts Path",
            "type": "string",
            "default": ""
          },
          "custom_model_name": {
            "title": "Custom Model Name",
            "type": "string",
            "default": ""
          },
          "epoch_pause_frequency": {
            "title": "Epoch Pause Frequency",
            "type": "integer",
            "default": 0
          },
          "epoch_pause_time": {
            "title": "Epoch Pause Time",
            "type": "integer",
            "default": 60
          },
          "gradient_accumulation_steps": {
            "title": "Gradient Accumulation Steps",
            "type": "integer",
            "default": 1
          },
          "gradient_checkpointing": {
            "title": "Gradient Checkpointing",
            "type": "boolean",
            "default": true
          },
          "gradient_set_to_none": {
            "title": "Gradient Set To None",
            "type": "boolean",
            "default": true
          },
          "graph_smoothing": {
            "title": "Graph Smoothing",
            "type": "integer",
            "default": 50
          },
          "half_model": {
            "title": "Half Model",
            "type": "boolean",
            "default": false
          },
          "hflip": {
            "title": "Hflip",
            "type": "boolean",
            "default": true
          },
          "learning_rate": {
            "title": "Learning Rate",
            "type": "number",
            "default": 0.000002
          },
          "learning_rate_min": {
            "title": "Learning Rate Min",
            "type": "number",
            "default": 0.000001
          },
          "lora_learning_rate": {
            "title": "Lora Learning Rate",
            "type": "number",
            "default": 0.0002
          },
          "lora_model_name": {
            "title": "Lora Model Name",
            "type": "string",
            "default": ""
          },
          "lora_txt_learning_rate": {
            "title": "Lora Txt Learning Rate",
            "type": "number",
            "default": 0.0002
          },
          "lora_txt_weight": {
            "title": "Lora Txt Weight",
            "type": "integer",
            "default": 1
          },
          "lora_weight": {
            "title": "Lora Weight",
            "type": "integer",
            "default": 1
          },
          "lr_cycles": {
            "title": "Lr Cycles",
            "type": "integer",
            "default": 1
          },
          "lr_factor": {
            "title": "Lr Factor",
            "type": "number",
            "default": 0.5
          },
          "lr_power": {
            "title": "Lr Power",
            "type": "number",
            "default": 1
          },
          "lr_scale_pos": {
            "title": "Lr Scale Pos",
            "type": "number",
            "default": 0.5
          },
          "lr_scheduler": {
            "title": "Lr Scheduler",
            "type": "string",
            "default": "constant"
          },
          "lr_warmup_steps": {
            "title": "Lr Warmup Steps",
            "type": "integer",
            "default": 500
          },
          "max_token_length": {
            "title": "Max Token Length",
            "type": "integer",
            "default": 75
          },
          "mixed_precision": {
            "title": "Mixed Precision",
            "type": "string",
            "default": "no"
          },
          "model_name": {
            "title": "Model Name",
            "type": "string",
            "default": ""
          },
          "num_train_epochs": {
            "title": "Num Train Epochs",
            "type": "integer",
            "default": 100
          },
          "pad_tokens": {
            "title": "Pad Tokens",
            "type": "boolean",
            "default": true
          },
          "pretrained_vae_name_or_path": {
            "title": "Pretrained Vae Name Or Path",
            "type": "string",
            "default": ""
          },
          "prior_loss_weight": {
            "title": "Prior Loss Weight",
            "type": "number",
            "default": 1
          },
          "resolution": {
            "title": "Resolution",
            "type": "integer",
            "default": 512
          },
          "revision": {
            "title": "Revision",
            "type": "integer",
            "default": 0
          },
          "sample_batch_size": {
            "title": "Sample Batch Size",
            "type": "integer",
            "default": 1
          },
          "sanity_prompt": {
            "title": "Sanity Prompt",
            "type": "string",
            "default": ""
          },
          "sanity_seed": {
            "title": "Sanity Seed",
            "type": "integer",
            "default": 420420
          },
          "save_ckpt_after": {
            "title": "Save Ckpt After",
            "type": "boolean",
            "default": true
          },
          "save_ckpt_cancel": {
            "title": "Save Ckpt Cancel",
            "type": "boolean",
            "default": false
          },
          "save_ckpt_during": {
            "title": "Save Ckpt During",
            "type": "boolean",
            "default": true
          },
          "save_embedding_every": {
            "title": "Save Embedding Every",
            "type": "integer",
            "default": 25
          },
          "save_lora_after": {
            "title": "Save Lora After",
            "type": "boolean",
            "default": true
          },
          "save_lora_cancel": {
            "title": "Save Lora Cancel",
            "type": "boolean",
            "default": false
          },
          "save_lora_during": {
            "title": "Save Lora During",
            "type": "boolean",
            "default": true
          },
          "save_preview_every": {
            "title": "Save Preview Every",
            "type": "integer",
            "default": 5
          },
          "save_state_after": {
            "title": "Save State After",
            "type": "boolean",
            "default": false
          },
          "save_state_cancel": {
            "title": "Save State Cancel",
            "type": "boolean",
            "default": false
          },
          "save_state_during": {
            "title": "Save State During",
            "type": "boolean",
            "default": false
          },
          "src": {
            "title": "Src",
            "type": "string",
            "default": ""
          },
          "shuffle_tags": {
            "title": "Shuffle Tags",
            "type": "boolean",
            "default": false
          },
          "train_batch_size": {
            "title": "Train Batch Size",
            "type": "integer",
            "default": 1
          },
          "train_imagic": {
            "title": "Train Imagic",
            "type": "boolean",
            "default": false
          },
          "stop_text_encoder": {
            "title": "Stop Text Encoder",
            "type": "number",
            "default": 0
          },
          "use_8bit_adam": {
            "title": "Use 8Bit Adam",
            "type": "boolean",
            "default": false
          },
          "use_concepts": {
            "title": "Use Concepts",
            "type": "boolean",
            "default": false
          },
          "use_ema": {
            "title": "Use Ema",
            "type": "boolean",
            "default": true
          },
          "use_lora": {
            "title": "Use Lora",
            "type": "boolean",
            "default": false
          },
          "use_subdir": {
            "title": "Use Subdir",
            "type": "boolean",
            "default": true
          }
        }
      },
      "Estimation": {
        "title": "Estimation",
        "required": [
          "queue_size",
          "queue_eta"
        ],
        "type": "object",
        "properties": {
          "msg": {
            "title": "Msg",
            "type": "string",
            "default": "estimation"
          },
          "rank": {
            "title": "Rank",
            "type": "integer"
          },
          "queue_size": {
            "title": "Queue Size",
            "type": "integer"
          },
          "avg_event_process_time": {
            "title": "Avg Event Process Time",
            "type": "number"
          },
          "avg_event_concurrent_process_time": {
            "title": "Avg Event Concurrent Process Time",
            "type": "number"
          },
          "rank_eta": {
            "title": "Rank Eta",
            "type": "integer"
          },
          "queue_eta": {
            "title": "Queue Eta",
            "type": "integer"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "InstanceData": {
        "title": "InstanceData",
        "required": [
          "data",
          "name",
          "txt"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "File data",
            "type": "string",
            "description": "Base64 representation of the file"
          },
          "name": {
            "title": "File name",
            "type": "string"
          },
          "txt": {
            "title": "Prompt",
            "type": "string"
          }
        }
      },
      "PredictBody": {
        "title": "PredictBody",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "session_hash": {
            "title": "Session Hash",
            "type": "string"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {}
          },
          "fn_index": {
            "title": "Fn Index",
            "type": "integer"
          },
          "batched": {
            "title": "Batched",
            "type": "boolean",
            "default": false
          },
          "request": {
            "title": "Request",
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            ]
          }
        }
      },
      "ResetBody": {
        "title": "ResetBody",
        "required": [
          "session_hash",
          "fn_index"
        ],
        "type": "object",
        "properties": {
          "session_hash": {
            "title": "Session Hash",
            "type": "string"
          },
          "fn_index": {
            "title": "Fn Index",
            "type": "integer"
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      }
    }
  }
}